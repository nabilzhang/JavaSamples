<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:batch-int="http://www.springframework.org/schema/batch-integration"
       xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/batch-integration
    http://www.springframework.org/schema/batch-integration/spring-batch-integration.xsd
    http://www.springframework.org/schema/batch
    http://www.springframework.org/schema/batch/spring-batch.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration.xsd
    http://www.springframework.org/schema/integration/amqp
    http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
    http://www.springframework.org/schema/integration/file
    http://www.springframework.org/schema/integration/file/spring-integration-file-4.3.xsd
    http://www.springframework.org/schema/rabbit
    http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- spring batch repository-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/spring_batch_example"/>
        <property name="username" value="root"/>
        <property name="password" value=""/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- Create job-meta tables automatically -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath*:org/springframework/batch/core/schema-drop-mysql.sql"/>
        <jdbc:script location="classpath*:org/springframework/batch/core/schema-mysql.sql"/>
    </jdbc:initialize-database>
    <batch:job-repository data-source="dataSource" transaction-manager="transactionManager"/>
    <bean id="simpleLaucher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <!--laucher-->
    <!-- From rabbitmiq -->
    <int-amqp:inbound-channel-adapter channel="fromRabbit"
                                      queue-names="logbackdemo" connection-factory="connectionFactory"/>
    <int:channel id="fromRabbit">
        <int:interceptors>
            <int:wire-tap channel="loggingChannel"/>
        </int:interceptors>
    </int:channel>
    <int:logging-channel-adapter id="loggingChannel" log-full-message="true" logger-name="tapInbound"
                                 level="INFO"/>
    <int:transformer input-channel="fromRabbit" output-channel="outboundJobRequestChannel">
        <bean class="me.nabil.demo.springbatchdemo.AmqpMessageCustomerTransformer">
            <property name="job" ref="personJob2"/>
            <property name="idParameterName" value="input.message"/>
            <property name="msgIdParameterName" value="input.messageId"/>
        </bean>
    </int:transformer>

    <!--from file-->
    <int:channel id="inboundFileChannel"/>
    <int-file:inbound-channel-adapter id="filePoller" channel="inboundFileChannel" directory="file:/tmp/batch-hellos/"
                                      filename-pattern="*.csv">
        <int:poller fixed-rate="1000"/>
    </int-file:inbound-channel-adapter>
    <int:transformer input-channel="inboundFileChannel" output-channel="outboundJobRequestChannel">
        <bean class="me.nabil.demo.springbatchdemo.FileMessageToJobRequest">
            <property name="job" ref="personJob2"/>
            <property name="fileParameterName" value="input.message"/>
        </bean>
    </int:transformer>

    <!--laucher-->
    <int:channel id="outboundJobRequestChannel"/>
    <int:channel id="jobLaunchReplyChannel"/>
    <batch-int:job-launching-gateway request-channel="outboundJobRequestChannel"
                                     reply-channel="jobLaunchReplyChannel"
                                     job-launcher="simpleLaucher"/>
    <int:logging-channel-adapter channel="jobLaunchReplyChannel"/>


    <!-- Infrastructure -->
    <rabbit:connection-factory id="connectionFactory" host="localhost" virtual-host="/logbacklog"/>
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"/>
    <rabbit:admin connection-factory="connectionFactory"/>
    <rabbit:queue name="logbackdemo"/>


    <!--spring batch-->
    <int:channel id="stepExecutionsChannel"/>
    <int:gateway id="notificationExecutionsListener"
                 service-interface="org.springframework.batch.core.StepExecutionListener"
                 default-request-channel="stepExecutionsChannel"/>
    <int:logging-channel-adapter channel="stepExecutionsChannel"/>
    <!--step1-->
    <bean id="itemReader" class="me.nabil.demo.springbatchdemo.job.StringReader" scope="step">
        <property name="message" value="#{jobParameters['input.message']}"/>
    </bean>
    <bean id="itemWriter" class="me.nabil.demo.springbatchdemo.job.StringWriter" scope="step"/>
    <bean id="itemProcessor" class="me.nabil.demo.springbatchdemo.job.MessageProcessor" scope="step"/>

    <!--jobDecider-->
    <bean id="failed" class="me.nabil.demo.springbatchdemo.job.DecisionTasklet">
        <property name="message" value="failed"/>
    </bean>
    <bean id="success" class="me.nabil.demo.springbatchdemo.job.DecisionTasklet">
        <property name="message" value="success"/>
    </bean>
    <bean id="jobDecider" class="me.nabil.demo.springbatchdemo.job.JobDecider"/>

    <!--jobs-->
    <batch:job id="personJob" restartable="false">
        <batch:step id="step1" next="decision">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="itemReader" writer="itemWriter"
                             commit-interval="1" processor="itemProcessor" processor-transactional="true"></batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:decision id="decision" decider="jobDecider">
            <batch:next on="FAILED" to="step2"/>
            <batch:next on="COMPLETED" to="step3"/>
        </batch:decision>
        <batch:step id="step2">
            <batch:tasklet ref="failed" transaction-manager="transactionManager"/>
        </batch:step>
        <batch:step id="step3">
            <batch:tasklet ref="success" transaction-manager="transactionManager"/>
        </batch:step>
    </batch:job>

    <bean id="helloword" class="me.nabil.demo.springbatchdemo.job.HelloTasklet" scope="step">
        <property name="message" value="#{jobParameters['input.message']}"/>
        <property name="messageId" value="#{jobParameters['input.messageId']}"/>
    </bean>
    <batch:job id="personJob2">
        <batch:step id="personJob2_step1">
            <batch:tasklet ref="helloword" transaction-manager="transactionManager"/>
        </batch:step>
    </batch:job>


</beans>